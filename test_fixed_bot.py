#!/usr/bin/env python3
# test_fixed_bot.py - Prueba r√°pida del bot arreglado

import time
from datetime import datetime
from iqoptionapi.stable_api import IQ_Option
from config import *

print("üß™ PRUEBA R√ÅPIDA DEL BOT ARREGLADO")
print("="*50)

# Conectar
print("\nüîó Conectando...")
iq = IQ_Option(IQ_EMAIL, IQ_PASSWORD)
check, reason = iq.connect()

if not check:
    print(f"‚ùå Error: {reason}")
    exit()

iq.change_balance(ACCOUNT_TYPE)
print(f"‚úÖ Conectado. Balance: ${iq.get_balance():,.2f}")

# Hacer operaci√≥n peque√±a
print("\nüìä Haciendo operaci√≥n de prueba ($1)...")
check, order_id = iq.buy(1, "EURUSD-OTC", "call", 1)

if check:
    print(f"‚úÖ Orden creada: {order_id}")
    print("‚è≥ Esperando 75 segundos...")
    
    for i in range(75, 0, -5):
        print(f"   {i}s...", end="\r")
        time.sleep(5)
    
    # Verificar con historial (m√©todo seguro)
    print("\n\nüîç Verificando resultado...")
    history = iq.get_position_history("binary-option", 300)
    
    if history and 'positions' in history:
        for pos in history['positions']:
            if str(pos.get('id')) == str(order_id):
                win = pos.get('win')
                amount = pos.get('amount', 0)
                win_amount = pos.get('win_amount', 0)
                
                print(f"\nüìä RESULTADO:")
                print(f"   Status: {win}")
                print(f"   Monto: ${amount}")
                print(f"   Retorno: ${win_amount}")
                
                if win == 'win':
                    print(f"   ‚úÖ GANANCIA: +${win_amount - amount:.2f}")
                elif win == 'loose':
                    print(f"   ‚ùå P√âRDIDA: -${amount:.2f}")
                elif win == 'equal':
                    print(f"   üü° EMPATE: $0")
                break
        else:
            print("‚ùå Orden no encontrada en historial")
else:
    print(f"‚ùå Error creando orden: {order_id}")

print("\n‚úÖ Prueba completada")
