# minimal_test.py
# Test m√≠nimo para verificar que no hay bloqueos

import time
from iqoptionapi.stable_api import IQ_Option
from config import IQ_EMAIL, IQ_PASSWORD, ACCOUNT_TYPE

print("üß™ TEST M√çNIMO - SIN BLOQUEOS")
print("="*40)

# Conectar
iq = IQ_Option(IQ_EMAIL, IQ_PASSWORD)
check, reason = iq.connect()

if not check:
    print(f"‚ùå Error: {reason}")
    exit()

iq.change_balance(ACCOUNT_TYPE)
print(f"‚úÖ Conectado. Balance: ${iq.get_balance():,.2f}")

# Test 1: Historial (m√©todo seguro)
print("\nüìã Test 1: Historial de posiciones (SEGURO)")
try:
    start = time.time()
    history = iq.get_position_history("binary-option", 300)
    elapsed = time.time() - start
    
    if history and 'positions' in history:
        print(f"‚úÖ Funciona! ({elapsed:.2f}s)")
        print(f"   √ìrdenes encontradas: {len(history['positions'])}")
    else:
        print(f"‚ö†Ô∏è Sin datos ({elapsed:.2f}s)")
except Exception as e:
    print(f"‚ùå Error: {str(e)}")

# Test 2: get_async_order (generalmente seguro)
print("\nüìã Test 2: get_async_order")
try:
    start = time.time()
    # Usar un ID ficticio
    result = iq.get_async_order("12345678900")
    elapsed = time.time() - start
    print(f"‚úÖ No se bloque√≥ ({elapsed:.2f}s)")
    print(f"   Resultado: {result}")
except Exception as e:
    print(f"‚ö†Ô∏è Error controlado: {str(e)}")

# Test 3: check_win_v3 (PELIGROSO - con timeout manual)
print("\nüìã Test 3: check_win_v3 (PELIGROSO)")
print("‚ö†Ô∏è Este m√©todo puede bloquearse...")

import threading
result = [None]
error = [None]

def test_check_win():
    try:
        result[0] = iq.check_win_v3("12345678900")
    except Exception as e:
        error[0] = str(e)

# Ejecutar en thread con timeout
thread = threading.Thread(target=test_check_win)
thread.daemon = True
thread.start()
thread.join(3)  # Esperar m√°ximo 3 segundos

if thread.is_alive():
    print("‚ùå BLOQUEADO! El m√©todo check_win_v3 causa bloqueos")
    print("üö® NO USES check_win_v3 en el bot")
else:
    if error[0]:
        print(f"‚ö†Ô∏è Error: {error[0]}")
    else:
        print(f"‚úÖ Complet√≥ sin bloqueo: {result[0]}")

print("\n" + "="*40)
print("üìä RESUMEN:")
print("‚úÖ USA: get_position_history (seguro y confiable)")
print("‚ö†Ô∏è EVITA: check_win_v3 (causa bloqueos)")
print("="*40)